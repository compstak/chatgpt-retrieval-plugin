[tool.poetry]
name = "chatgpt-retrieval-plugin"
version = "0.1.0"
description = ""
authors = ["isafulf <isabella@openai.com>", "jeonghoon-kim <jeonghoon@compstak.com>"]
readme = "README.md"

[tool.poetry.scripts]
chatgpt_retrieval_plugin = "chatgpt_retrieval_plugin.main:app"

[tool.poetry.dependencies]
python = "^3.10"
rich = "*"
typer = { version = "*", extras = ["all"] }
structlog = "^22.3.0"
pydantic = { version = "*", extras = ["dotenv"] }
fastapi = { version = "^0.95.0", extras = ["all"] }
starlette-prometheus = "^0.9.0"
uvicorn = "^0.20.0"
openai = "^0.27.2"
tenacity = "^8.2.1"
tiktoken = "^0.2.0"
numpy = "^1.24.2"
docx2txt = "^0.8"
PyPDF2 = "^3.0.1"
python-pptx = "^0.6.21"
python-multipart = "^0.0.6"
arrow = "^1.2.3"
pymilvus = "^2.2.1"
milvus-cli = "^0.3.2"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-mock = "*"
pytest-cov = "*"
pytest-asyncio = "*"
hypothesis = "*"
pre-commit = "*"
nox-poetry = "*"

[tool.poetry.group.jupyter]
optional = true

[tool.poetry.group.jupyter.dependencies]
ipykernel = "*"
jupyter = "*"
jupyter_contrib_nbextensions = "*"
tqdm = "*"

[tool.poetry.group.type_check]
optional = true

[tool.poetry.group.type_check.dependencies]
mypy = "*"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
flake8 = "*"
flake8-bugbear = "*"
flake8-broken-line = "*"
flake8-comprehensions = "*"
flake8-pyproject = "*"
pep8-naming = "*"

[tool.poetry.group.fmt]
optional = true

[tool.poetry.group.fmt.dependencies]
black = "*"
isort = "*"

[tool.mypy]
plugins = [
  "pydantic.mypy"
]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.flake8]
max-line-length = 260
extend-ignore = ["E203"]
extend-immutable-calls = ["Argument"]

[tool.black]
line-length = 260
target-version = ["py39", "py310"]

[tool.isort]
profile = "black"
line_length = 260
force_sort_within_sections = true
skip_gitignore = true

[tool.pytest.ini_options]
pythonpath = ["."]
asyncio_mode="auto"
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
filterwarnings = [
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
# fail_under = 100

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
